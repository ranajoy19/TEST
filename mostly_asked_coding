# find odd or even number without using for loop and if 

# list1  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 
# even_number = list (filter(lambda x: x % 2 == 0 ,list1))
# print(even_number)
# odd_number = list(filter(lambda x : x % 2 !=0,list1))
# print(odd_number)

# Listing Duplicates in a List & Listing Unique Values

# list1 = [5, 3, 5, 2, 1, 6, 6, 4]

# unique = []
# dublicate = []
# for i in list1:
#     if i not in unique:
#         unique.append(i)
#     else:
#         dublicate.append(i)
# unique.extend(dublicate)
# print(unique)




#1 revesed the word using python 

# word = "my name is ranajoy"

# revesed = " ".join(word.split()[::-1])

# print(revesed)



#2 generate an infinte fibonaaci series uing generator

# normal fibonaaci series using recersion and for loop


# METHOD =1
# sourcery skip: avoid-builtin-shadow
'''def fibo(n):
    if n == 0:
        return 0

    elif n==1 or n==2:
        return 1

    else:
        return fibo(n-1)+ fibo(n-2)

for i in range(1,10):
    print( "index of {} :{}".format(i,fibo(i)))
'''


# METHOD =2
'''
def fibo(n):
    a=0
    b=1
    
    if n ==1 or n ==2:
        return 1
    elif n ==0:
        return 0
    else:
        for i in range(1,n):
            c = a+b
            a = b
            b = c
        return b        

for i in range(12):
    print( "index of {} :{}".format(i,fibo(i)))
'''

# Method = using Generator

# def fibo():
#     a=0
#     b=1
#     while True:
#         yield a
#         a,b = b, a+b 

# f1 = fibo()

# print(next(f1))
# print(next(f1))
# print(next(f1))
# print(next(f1))


#3 Palindrome string 

# string Method - 1

# def palindrome(n):

#     rev = n[::-1]

#     if n == rev:
#         print(n,"is a palindrome string")
#     else:
#         print(n,"is not a palindrome string")    


# palindrome("baab")


# string method 2 

# def palindrome(n):

#     rev = ""
#     for i in range(len(n)-1,-1,-1):
#         rev = rev + n[i]
#     if n == rev:
#         print(n,"is a palindrome string")
#     else:
#         print(n,"is not a palindrome string")      

# palindrome("baab")

#  Palindrome Number

# def palindrome(n):
#     org = n
#     rev =0
#     while n>0:
#         rev = (10*rev) + (n%10)
#         n = n//10
#     if rev == org:
#         print(org,"is a palindrome number")
#     else:
#         print(org,"is not a palindrome number") 
# palindrome(323)

# armstrong number 

# def armstrong(n):
#     s=0
#     m = len(str(n))
#     check = n
#     while n>0:
#         digit =n%10
#         s += digit ** m
#         n = n //10
#     if s == check :
#         return (f"{check} is armstrong number")
#     else:
#         return (f"{check} is  not a armstrong number")

# print(armstrong(8208))
# string = 'abcded'
# list1 = [1,1,2,3,5,8]

# sum = sum(list1)
# string1 = str(sum)
# for i in range(len(string)):
#     string1 = string1+str(string[i])+str(list1[i])
# print(string1)    

# 2) find the sum of each string and find the biggest sum from the list
# A=[222,121,145,611] find the largest sum if entire number ,
# like 2+2+2=6 ,1+2+1= 4

# arr =[124,341,126,632]
# new_arr=[]
# for i in arr:
#     string = list(map(int,str(i)))
#     add = sum(string)
#     new_arr.append(add)
# print(max(new_arr),new_arr)    

#sort without using sort Keyword 
# list = [-5, -23, 5, 0, 23, -6, 23, 67]

# for i in range(len(list)):
#     for j in range(i+1,len(list)):
#         if list[i]>=list[j]:
#             list[i],list[j]=list[j],list[i]
# print(list)


# print all the pairs with given sum

# list=[8,7,2,5,3,1]
# sum = 10
# method 1
# for i in range(len(list)):
#     for j in range(i+1,len(list)):
#         if (list[i]+list[j]) == sum:
#             print(list[i],list[j])

# Method 2
# new_list=[]
# for i in list:
#     left = sum-i
#     if left in new_list:
#         print(i,left)
#   
#     new_list.append(i)

# armstronge Number 
# loggic = 153 = 1^3+5^3+3^3 = 1 + 125+ 27 =153
# 0 + 27 = 27 + 125
# def arm(n):
#     org= n
#     sum=0
#     while n >0:
#         sum = sum + (n%10) *(n%10) *(n%10) 
#         n = n //10
#     print(sum)    
#     if org == sum:
#         print(f"{org} is a armstrong number")
#     else:
#         print(f"{org} is not a armstrong number" )

# arm(153)


# 2124. Check if All A's Appears Before All B's

#Input: s = "aaabbb"
# Output: true
# Explanation:
# The 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.
# Hence, every 'a' appears before every 'b' and we return true.




# def check(s):
#     b=False
#     for i in s:
#         if i == "a":
#             if b == True:
#                 return False
#         else:
#             b= True
#     return True


# print(check("abab"))


# Write a Python program to find the common elements between two lists.
# list1=[20,10,30,40,40]
# list2=[30,20,60,70,80]

# 1 method
# list3 = [i for i in list1 if i in list2]
# print(list3)

# 2 method
# list3 = list(set(list1).intersection(list2))
# print(list3)

#Write a Python program to find the first non-repeating character in a string.
# string='stststopp'

# def firstUniqChar(s):
#     d={}
#     for i in range(len(s)):
#         if s[i] not in d:
#             d[s[i]]=True
#         else:
#             d[s[i]]=False
#     for i in range(len(s)):
#         if d[s[i]] ==True:
#             return s[i]
#     return -1

# print(firstUniqChar(string))
# from array import *
# array_num = array('i', [1, 3, 5, 7, 9])
# array_num.insert(1,5)
# print(array_num)

# def int_to_roman(n):
#     pass

# print prime number
# import time
# def prime(n):
#     t1= time.time()
#     for i in range(n):
#         for n in range(2,i):
#             if (i % n) ==0:
#                 break
#         else:
#             roman=int_to_roman(i)
#             print(roman)
#     t2 =time.time()
#     print(t2-t1)


# def prime(l,u):
#     for i in range(l,u):
#         for n in range(2,i):
#             if (i%n)==0:
#                 break
#         else:
#             print(i)
# prime(3,12)


# Group Anagrams

# strs = ["eat","tea","tan","ate","nat","bat"]
# # # Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
#  #creating a hashmap to group the string
# d={}

# for i in strs:
#     # will sort the sting so it will became same
#     w = ''.join(sorted(i))

#     if w in d:
#         d[w].append(i)
#     else:
#         d[w] = [i]

# print(list(d.values()))



# Remove adjacent duplicate characters from a string
# Input:  AABBBACDDD
# Output: ABACD

# def removeDuplicates(s):
#     pre= None
#     l=[]
#     for i in s:
#         if i != pre:
#             l.append(i)
#             pre=i
#     return "".join(l)


# print(removeDuplicates("AABBBACDDD"))



# Write a recursive program to reverse a given string.
# Input:  mihup ai
# Output: ia puhim


# def reve(s):
#     return s if len(s) ==1 else reve(s[1:])+s[0]


# print(reve("ia puhim"))



#Is Subsequence - LeetCode


# Input: s = "abc", t = "ahbgdc"
# Output: true

# def Subsequence(s,t):
#     i ,j =0,0
#     while i<len(s) and j < len(t):
#         if t[j] == s[i]:
#             i +=1
#         j+=1

#     return len(s) == i


    
# print(Subsequence('axc','acbgd'))


# 14. Longest Common Prefix
# Input: strs = ["flower","flow","flight"]
# Output: "fl"


# def longestCommonPrefix(strs):
#     res=""
#     for i in range(len(strs[0])):
#         for s in strs:
#             if i == len(s) or s[i] != strs[0][i]:
#                 return res
#         res+= strs[0][i] 

# print(longestCommonPrefix(["flower","flow","flight"]))